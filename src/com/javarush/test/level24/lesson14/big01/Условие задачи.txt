Задание 8
Но и это еще не все.
Классу BaseObject нужны еще методы.
Пока это будут пустые методы draw() и move().
Классы-наследники должны будут переопределить их у себя и реализовать необходимую функциональность.
Объяви эти методы, но сделай их абстрактными.
Также сделай абстрактным сам класс BaseObject.

А еще нам нужно будет определять попал шарик в кирпич или в подставку.
Это будем делать так:
В этом же классе, создадим специальный метод: public boolean isIntersec(BaseObject o)
Он будет определять - "пересеклись" объекты или нет. Если пересеклись - возвращать true, если нет - false.

Т.к. объекты мы условно считаем кругами, то предлагаю такую формулу взаимодействия
Если центр круга одного объекта попал в круг другого, то будем считать, что они столкнулись.
Или еще проще:
дистанция_между_объектами < max (радиус_первого_объекта, радиус_второго_объекта)



Задание 7
Теперь перейдем к классу BaseObject.
Я хочу сделать несколько предложений.

Во-первых для простоты считать все объекты у нас будут круглыми.
Нет, отрисовывать их мы будем фигурными, как и раньше.
А вот при расчетах из взаимодействия исходить из того, что они круглые.
Так - гораздо проще.

Во-вторых. Пусть координаты объектов и радиус будут вещественными числами.
Это придаст плавность движениям и точность всем вычислениям.
А при отрисовке мы будем их округлять

Надо:
а) Добавь в класс BaseObject переменные x (double), y (double), radius (double)
б) Добавить геттеры и сеттеры
в) Добавь конструктор BaseObject(double x, double y, double radius)
г) Надо пройтись по все классам-наследникам и поправить у них конструкторы
Если вы пользуйтесь Intellij IDEA - Alt+Insert вам в помощь



Задание 6
У нас будут "кирпичи", "шарик" и "подставка" и у них будет много общего.
Они будут перемещаться по полю и отрисовываться.
Значит у них у всех будут координаты и размер.
А еще методы move() - для перемещения и draw() для отрисовки.

Есть интересное предложение: давай введем один базовый класс для все объектов.
Пусть это будет класс BaseObject.
А классы Ball, Stand, Brick от него наследуются.
Создай класс BaseObject и добавь его родителем к классам  Ball, Stand, Brick

Еще нам понадобится класс Canvas
Он будет ответственным за "отрисовку" объектов.
С помощью его они будут отрисовывать себя.
Вернее даже на нем, но детали я сообщу позднее.
Создай и этот класс.



Задание 5
Чего еще не хватает классу Arcanoid?
Ну во-первых ему нужен метод run(), в котором будет описана основная логика программы
Еще нужен метод move() - который будет двигать на один шаг все объекты требующие движения.
Создай методы run() и move().

Еще нам понадобится статическая переменная game типа Arcanoid, которая будет хранить ссылку
на созданный экземпляр класса Arcanoid.
Выглядеть это должно примерно так:
public static Arcanoid game;



Задание 4
Также классу Arcanoid нужно будет хранить ссылку на шарик (Ball) и "подставку" Stand.
И список "кирпичей"
Надо:
а) создать в классе Arcanoid две переменных ball типа Ball и stand типа Stand
б) добавить переменную bricks типа ArrayList<Brick>
в) добавь для них геттеры и сеттеры



Задание 3
Главному классу (Arcanoid) нужно будет хранить информацию о размерах поля, где будут происходить все действия.
Поэтому:
а) добавь ему две переменных width (ширина) типа int и height(высота) типа int
б) добавь их в конструктор класса
г) сделай для них геттеры и сеттеры



Задание 2
Добавь в класс Arcanoid метод main.



Задание 1
Давай сегодня напишем игру Арканоид.
В оригинале это выглядит примерно так http://www.youtube.com/watch?v=Th-Z6QQ5AOQ
Для начала мы напишем упрощенную версию этой игры.
У нас будут кубики, шарик и летающая "подставка", которая не дает шарику упасть.

Поэтому нам понадобятся классы:
а) Arcanoid - класс в котором происходят основные действия
б) Ball - шарик
в) Brick - "кирпичи", которые мы сбиваем шариком
г) Stand - летающая подставка

Создай их.